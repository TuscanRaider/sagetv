/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class sage_MMC */

#ifndef _Included_sage_MMC
#define _Included_sage_MMC
#ifdef __cplusplus
extern "C" {
#endif
/* Inaccessible static: VALID_AUDIO_BITRATES */
#undef sage_MMC_UNKNOWN_CAPTURE_CONFIG
#define sage_MMC_UNKNOWN_CAPTURE_CONFIG 0L
#undef sage_MMC_RAW_AV_CAPTURE_MASK
#define sage_MMC_RAW_AV_CAPTURE_MASK 256L
#undef sage_MMC_MPEG_VIDEO_ONLY_CAPTURE_MASK
#define sage_MMC_MPEG_VIDEO_ONLY_CAPTURE_MASK 512L
#undef sage_MMC_MPEG_VIDEO_RAW_AUDIO_CAPTURE_MASK
#define sage_MMC_MPEG_VIDEO_RAW_AUDIO_CAPTURE_MASK 1024L
#undef sage_MMC_MPEG_AV_CAPTURE_MASK
#define sage_MMC_MPEG_AV_CAPTURE_MASK 2048L
#undef sage_MMC_CAPTURE_STREAM_CAPS_MASK
#define sage_MMC_CAPTURE_STREAM_CAPS_MASK 12032L
#undef sage_MMC_LIVE_PREVIEW_MASK
#define sage_MMC_LIVE_PREVIEW_MASK 4096L
#undef sage_MMC_MPEG_PURE_CAPTURE_MASK
#define sage_MMC_MPEG_PURE_CAPTURE_MASK 8192L
#undef sage_MMC_SM2210_ENCODER_MASK
#define sage_MMC_SM2210_ENCODER_MASK 1L
#undef sage_MMC_PYTHON2_ENCODER_MASK
#define sage_MMC_PYTHON2_ENCODER_MASK 2L
#undef sage_MMC_VBDVCR_ENCODER_MASK
#define sage_MMC_VBDVCR_ENCODER_MASK 4L
#undef sage_MMC_MICRONAS_AUDIO_MASK
#define sage_MMC_MICRONAS_AUDIO_MASK 8L
#undef sage_MMC_JANUS_CAPTURE_MASK
#define sage_MMC_JANUS_CAPTURE_MASK 16L
#undef sage_MMC_BLACKBIRD_CAPTURE_MASK
#define sage_MMC_BLACKBIRD_CAPTURE_MASK 32L
#undef sage_MMC_NEC61051_ENCODER_MASK
#define sage_MMC_NEC61051_ENCODER_MASK 64L
/* Inaccessible static: DEFAULT_PYTHON_ENCODINGS */
/* Inaccessible static: DEFAULT_PYTHON_ENCODING_NAMES */
/* Inaccessible static: NEVER_IGNORED_ENCODERS */
/* Inaccessible static: chosenOne */
/* Inaccessible static: stringNumComparator */
/* Inaccessible static: class_00024sage_00024MMC_00024Python2EncodingParams */
/* Inaccessible static: class_00024sage_00024BasicVideoFrame */
/*
 * Class:     sage_MMC
 * Method:    getRecordedBytes
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_sage_MMC_getRecordedBytes
  (JNIEnv *, jobject);

/*
 * Class:     sage_MMC
 * Method:    showCaptureProperties0
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sage_MMC_showCaptureProperties0
  (JNIEnv *, jobject, jint);

/*
 * Class:     sage_MMC
 * Method:    initGraph0
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_initGraph0
  (JNIEnv *, jobject, jint);

/*
 * Class:     sage_MMC
 * Method:    startEncoding0
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_startEncoding0
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_MMC
 * Method:    startPreviewOnly0
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_startPreviewOnly0
  (JNIEnv *, jobject);

/*
 * Class:     sage_MMC
 * Method:    switchOutputFile0
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_switchOutputFile0
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_MMC
 * Method:    stopEncoding0
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_stopEncoding0
  (JNIEnv *, jobject);

/*
 * Class:     sage_MMC
 * Method:    teardownGraph0
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_teardownGraph0
  (JNIEnv *, jobject);

/*
 * Class:     sage_MMC
 * Method:    enablePreview0
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_enablePreview0
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     sage_MMC
 * Method:    disablePreview0
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_disablePreview0
  (JNIEnv *, jobject);

/*
 * Class:     sage_MMC
 * Method:    switchToConnector0
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_switchToConnector0
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     sage_MMC
 * Method:    setVideoSize0
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_setVideoSize0
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     sage_MMC
 * Method:    findCodecsAndDevices0
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_sage_MMC_findCodecsAndDevices0
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     sage_MMC
 * Method:    tuneToChannel0
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_sage_MMC_tuneToChannel0
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_MMC
 * Method:    autoTuneChannel0
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_autoTuneChannel0
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_MMC
 * Method:    getChannel0
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_sage_MMC_getChannel0
  (JNIEnv *, jobject, jint);

/*
 * Class:     sage_MMC
 * Method:    pvIRPortThread
 * Signature: (Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_sage_MMC_pvIRPortThread
  (JNIEnv *, jobject, jobject);

/*
 * Class:     sage_MMC
 * Method:    setLivePreviewMute0
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_sage_MMC_setLivePreviewMute0
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     sage_MMC
 * Method:    getLivePreviewMute0
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_getLivePreviewMute0
  (JNIEnv *, jobject);

/*
 * Class:     sage_MMC
 * Method:    irmanPortInit
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_sage_MMC_irmanPortInit
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_MMC
 * Method:    closeIRManPort
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sage_MMC_closeIRManPort
  (JNIEnv *, jobject, jint);

/*
 * Class:     sage_MMC
 * Method:    irmanPortThread
 * Signature: (Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_sage_MMC_irmanPortThread
  (JNIEnv *, jobject, jobject);

/*
 * Class:     sage_MMC
 * Method:    checkEncoder0
 * Signature: (Lsage/MMC$Encoder;)I
 */
JNIEXPORT jint JNICALL Java_sage_MMC_checkEncoder0
  (JNIEnv *, jobject, jobject);

/*
 * Class:     sage_MMC
 * Method:    openDTVSerial0
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_sage_MMC_openDTVSerial0
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_MMC
 * Method:    closeHandle0
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sage_MMC_closeHandle0
  (JNIEnv *, jobject, jint);

/*
 * Class:     sage_MMC
 * Method:    dtvSerialChannel0
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_MMC_dtvSerialChannel0
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     sage_MMC
 * Method:    updateColors0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_sage_MMC_updateColors0
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
