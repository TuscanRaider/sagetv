/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class sage_SFIRTuner */

#ifndef _Included_sage_SFIRTuner
#define _Included_sage_SFIRTuner
#ifdef __cplusplus
extern "C" {
#endif
/* Inaccessible static: loadedTuneys */
/*
 * Class:     sage_SFIRTuner
 * Method:    getValidDeviceFiles
 * Signature: ([Ljava/lang/String;)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_sage_SFIRTuner_getValidDeviceFiles
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:     sage_SFIRTuner
 * Method:    getPrettyDeviceNames
 * Signature: ([Ljava/lang/String;)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_sage_SFIRTuner_getPrettyDeviceNames
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:     sage_SFIRTuner
 * Method:    closeDevice
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_sage_SFIRTuner_closeDevice
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    deviceName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_sage_SFIRTuner_deviceName
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    findBitRate
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_sage_SFIRTuner_findBitRate
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    findCarrierFrequency
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_sage_SFIRTuner_findCarrierFrequency
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    initDevice
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_sage_SFIRTuner_initDevice
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    loadRemotes
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_sage_SFIRTuner_loadRemotes
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_SFIRTuner
 * Method:    needBitrate
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_sage_SFIRTuner_needBitrate
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    needCarrierFrequency
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_sage_SFIRTuner_needCarrierFrequency
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    openDevice
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_sage_SFIRTuner_openDevice
  (JNIEnv *, jobject, jint);

/*
 * Class:     sage_SFIRTuner
 * Method:    playCommand
 * Signature: (Lsage/SFIRTuner$Remote;Ljava/lang/String;I)V
 */
JNIEXPORT void JNICALL Java_sage_SFIRTuner_playCommand
  (JNIEnv *, jobject, jobject, jstring, jint);

/*
 * Class:     sage_SFIRTuner
 * Method:    recordCommand
 * Signature: (Ljava/lang/String;)Lsage/SFIRTuner$Command;
 */
JNIEXPORT jobject JNICALL Java_sage_SFIRTuner_recordCommand
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_SFIRTuner
 * Method:    saveRemotes
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_sage_SFIRTuner_saveRemotes
  (JNIEnv *, jobject, jstring);

/*
 * Class:     sage_SFIRTuner
 * Method:    init0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_sage_SFIRTuner_init0
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    goodbye0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_sage_SFIRTuner_goodbye0
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    canMacroTune
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_sage_SFIRTuner_canMacroTune
  (JNIEnv *, jobject);

/*
 * Class:     sage_SFIRTuner
 * Method:    macroTune
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sage_SFIRTuner_macroTune
  (JNIEnv *, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
